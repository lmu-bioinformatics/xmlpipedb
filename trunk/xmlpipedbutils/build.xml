<project name="xmlpipedbutils" default="jar">
	
	<property name="component.jarfilename" value="xpdutils" />
    <property name="demo.jarfilename" value="xpdutils-demo" />
    <property name="mainclass" value="edu.lmu.xmlpipedb.util.demo.XMLPipeDBUtils" />
	<property name="lib.list" value="lib/antlr.jar lib/asm.jar sample/lib/bookdb.jar lib/${component.jarfilename}.jar lib/cglib.jar lib/commons-beanutils-core-1.7.0.jar lib/commons-collections.jar lib/commons-digester-1.8.jar lib/commons-logging-1.1.jar lib/dom.jar lib/dom4j.jar lib/ehcache-0.9.jar lib/hibernate3.jar lib/hyperjaxb2.jar lib/jaxb-api-2.1.2.jar lib/jax-qname.jar lib/jaxb-impl-2.1.2.jar lib/jaxb-libs.jar lib/jaxb-xjc-2.1.2.jar lib/jaxb1-impl.jar lib/jaxp-api.jar lib/jsr173_1.0_api.jar lib/jta.jar lib/namespace.jar lib/postgresql-8.0-313.jdbc3.jar lib/relaxngDatatype.jar lib/sax.jar lib/xalan.jar lib/xercesImpl.jar lib/xom-1.1.jar lib/xsdlib.jar lib/shag-1.2.7.jar" />
    <property name="resources" value="edu/lmu/xmlpipedb/util/resources" />
    <property name="project.title" value="GUI to XML Pipe DB" />
    <property name="src.dir" value="src" />
    <property name="src.demo.dir" value="sample/src" />
    <property name="scripts.dir" value="scripts" />
    <property name="lib.dir" value="lib" />
    <property name="build.dir" value="build" />
    <property name="dist.dir" value="dist" />
    <property name="javadoc.dir" value="javadocs" />
	
    <fileset id="lib.jars" dir="${lib.dir}">
        <include name="**/*.jar" />
    </fileset>

    <path id="lib.path">
        <fileset refid="lib.jars" />
    </path>

    <path id="run.path">
        <fileset refid="lib.jars" />
        <fileset dir="${dist.dir}/lib">
            <include name="${component.jarfilename}.jar" />
        </fileset>
        <fileset dir="${dist.dir}">
            <include name="${demo.jarfilename}.jar" />
        </fileset>
        <fileset dir="sample/lib">
            <include name="**/*.jar" />
        </fileset>
    </path>

    <target name="clean" description="Remove generated files">
        <delete dir="${build.dir}" />
        <delete dir="${dist.dir}" />
    </target>

    <target name="init" depends="clean">
        <mkdir dir="${build.dir}" />
        <mkdir dir="${dist.dir}" />
        <tstamp />
    </target>

    <target name="javadoc" description="Generate JavaDocs" depends="compile">
        <delete dir="${javadoc.dir}" />
        <mkdir dir="${javadoc.dir}" />
        <javadoc sourcepath="${src.dir}" destdir="${javadoc.dir}" packagenames="*" doctitle="&lt;h1&gt;${project.title} API Documentation&lt;/h1&gt;" />
    </target>

    <target name="compile-utils" depends="init">
        <javac srcdir="${src.dir}" destdir="${build.dir}" classpathref="lib.path"/>

        <!-- Copy resource files, since they are needed at runtime. -->
        <copy todir="${build.dir}">
            <fileset dir="${src.dir}" includes="**/*.properties" />
        </copy>
    </target>
    
    <target name="compile-demo" depends="compile-utils">
        <javac srcdir="${src.demo.dir}" destdir="${build.dir}" classpathref="lib.path"/>

        <!-- Copy resource files, since they are needed at runtime. -->
        <copy todir="${build.dir}">
            <fileset dir="${src.demo.dir}" includes="**/*.properties" />
        </copy>
    </target>
    
    <target name="compile" depends="compile-utils">
    </target>

    <target name="jar" depends="compile,compile-demo" description="Makes the utility and demo JAR files.">
        <!-- Copy other libraries and the run scripts (.bat and .sh files) -->
        <copy todir="${dist.dir}/lib">
            <fileset dir="${lib.dir}/" includes="**/*.jar,**/*.properties" />
        </copy>
        <copy todir="${dist.dir}">
            <fileset dir="${scripts.dir}" includes="*.bat,*.sh" />
        </copy>
    	<!-- copy sample files to dist dir -->
    	<copy todir="${dist.dir}/sample/lib">
    	    <fileset dir="sample/lib" includes="*.jar" />
    	</copy>
    	<copy todir="${dist.dir}/sample/data">
    	    <fileset dir="sample/data" includes="*.xml" />
    	</copy>
    	<copy todir="${dist.dir}/sample/schema">
    	    <fileset dir="sample/schema" includes="*.xsd" />
       	</copy>
    	<copy todir="${dist.dir}/sample/sql">
    	    <fileset dir="sample/sql" includes="*.sql" />
       	</copy>

    	
        <!-- Jar the utility classes and copy to dist -->
        <jar destfile="${dist.dir}/lib/${component.jarfilename}.jar" basedir="${build.dir}" excludes="**/demo/**">
        </jar>

        <!-- Jar the demo classes and copy to dist -->
        <jar destfile="${dist.dir}/${demo.jarfilename}.jar" basedir="${build.dir}" includes="**/demo/**">
            <manifest>
    			<!--<manifest>
    				<attribute name="Main-Class" value="edu.lmu.xmlpipedb.gmbuilder.GenMAPPBuilder" />
    				<attribute name="Class-Path" value="lib/antlr-2.7.6rc1.jar lib/asm.jar lib/cglib-2.1.3.jar lib/commons-beanutils.jar lib/commons-collections-2.1.1.jar lib/commons-logging-1.0.4.jar lib/dom4j-1.6.1.jar lib/ehcache-1.1.jar lib/godb.jar lib/hibernate3.jar lib/hyperjaxb2.jar lib/jaxb-api.jar lib/jaxb-impl.jar lib/jaxb-libs.jar lib/jta.jar lib/junit-3.8.1.jar lib/log4j-1.2.11.jar lib/postgresql-8.1-405.jdbc3.jar lib/relaxngDatatype.jar lib/shag-1.1.jar lib/uniprotdb.jar lib/xpdutils.jar lib/wizard.jar lib/xsdlib.jar" />
    			</manifest>-->

                <attribute name="Main-Class" value="${mainclass}" />
            	<attribute name="Class-Path" value="${lib.list}" />
                <!-- TODO: For a self-contained demo jar, we need a Classpath in the manifest, too. -->
            </manifest>
        </jar>
    </target>

    <target name="run" depends="jar" description="Runs the demo application">
        <java classname="${mainclass}" fork="true" failonerror="false" classpathref="run.path" />
    </target>

    <target name="all" depends="clean,javadoc,jar" description="Initializes, Compiles, makes Jar and creates JavaDocs" />
</project>
